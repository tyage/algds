(define hilbert-a (lambda (x0 y0 x1 y1 i)
	(let ((xs (/ (+ (* 3.0 x0) x1) 4.0))
		(ys (/ (+ (* 3.0 y0) y1) 4.0))
		(xm (/ (+ x0 x1) 2.0))
		(ym (/ (+ y0 y1) 2.0))
		(xl (/ (+ x0 (* 3.0 x1)) 4.0))
		(yl (/ (+ y0 (* 3.0 y1)) 4.0)) )
		
		(if (= i 0)
			(list (make-vect xl yl) (make-vect xs yl)
				(make-vect xs ys) (make-vect xl ys))
			(append (hilbert-d xm ym x1 y1 (- i 1))
				(hilbert-a x0 ym xm y1 (- i 1))
				(hilbert-a x0 y0 xm ym (- i 1))
				(hilbert-b xm y0 x1 ym (- i 1))) ))))
(define hilbert-b (lambda (x0 y0 x1 y1 i)
	(let ((xs (/ (+ (* 3.0 x0) x1) 4.0))
		(ys (/ (+ (* 3.0 y0) y1) 4.0))
		(xm (/ (+ x0 x1) 2.0))
		(ym (/ (+ y0 y1) 2.0))
		(xl (/ (+ x0 (* 3.0 x1)) 4.0))
		(yl (/ (+ y0 (* 3.0 y1)) 4.0)) )
		
		(if (= i 0)
			(list (make-vect xs ys) (make-vect xs yl)
				(make-vect xl yl) (make-vect xl ys) )
			(append (hilbert-c x0 y0 xm ym (- i 1))
				(hilbert-b x0 ym xm y1 (- i 1))
				(hilbert-b xm ym x1 y1 (- i 1))
				(hilbert-a xm y0 x1 ym (- i 1))) ))))
(define hilbert-c (lambda (x0 y0 x1 y1 i)
	(let ((xs (/ (+ (* 3.0 x0) x1) 4.0))
		(ys (/ (+ (* 3.0 y0) y1) 4.0))
		(xm (/ (+ x0 x1) 2.0))
		(ym (/ (+ y0 y1) 2.0))
		(xl (/ (+ x0 (* 3.0 x1)) 4.0))
		(yl (/ (+ y0 (* 3.0 y1)) 4.0)) )
		
		(if (= i 0)
			(list (make-vect xs ys)(make-vect xl ys)
				 (make-vect xl yl) (make-vect xs yl) )
			(append (hilbert-b x0 y0 xm ym (- i 1))
				(hilbert-c xm y0 x1 ym (- i 1))
				(hilbert-c xm ym x1 y1 (- i 1))
				(hilbert-d x0 ym xm y1 (- i 1))) ))))
(define hilbert-d (lambda (x0 y0 x1 y1 i)
	(let ((xs (/ (+ (* 3.0 x0) x1) 4.0))
		(ys (/ (+ (* 3.0 y0) y1) 4.0))
		(xm (/ (+ x0 x1) 2.0))
		(ym (/ (+ y0 y1) 2.0))
		(xl (/ (+ x0 (* 3.0 x1)) 4.0))
		(yl (/ (+ y0 (* 3.0 y1)) 4.0)) )
		
		(if (= i 0)
			(list (make-vect xl yl) (make-vect xl ys)
				(make-vect xs ys) (make-vect xs yl))
			(append (hilbert-a xm ym x1 y1 (- i 1))
				(hilbert-d xm y0 x1 ym (- i 1))
				(hilbert-d x0 y0 xm ym (- i 1))
				(hilbert-c x0 ym xm y1 (- i 1))) ))))

(define vectors->segments (lambda (vectors)
	(define vector->segment (lambda (vector-list)
		(define a (car vector-list))
		(define b (cadr vector-list))
		(if (eq? nil b)
			'()
			(append (list (make-segment 
				(make-vect (car a) (cdr a))
				(make-vect (car b) (cdr b))))
				(vector->segment (cdr vector-list))) )))
	(vector->segment vectors) ))

(define hilbert (lambda (n)
	(segments->painter
		(vectors->segments (hilbert-a 0.0 0.0 1.0 1.0 n))) ))

; 以下は使用例です
(load "init.lsp")
(clear-picture)
((hilbert 4) frm1)
