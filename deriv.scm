(define (variable? x) (symbol? x))
(define (same-variable? x y)
  (and (variable? x) (eq? x y)) )
(define (sum? x)
  (and (pair? x)
       (eq? (car x) '+)) )
(define (subtract? x)
  (and (pair? x)
       (eq? (car x) '-)) )
(define (product? x)
  (and (pair? x)
       (eq? (car x) '*)) )
(define (division? x)
  (and (pair? x)
       (eq? (car x) '/)) )
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
	((=number? a1 0) a1)
	((and (number? a1) (number? a2))
	 (+ a1 a2))
	(else (list '+ a1 a2)) ))
(define (=number? exp num)
  (and (number? exp) (= exp num)) )
(define (make-product m1 m2)
  (cond ((or (=number? m1 0)
	     (=number? m2 0) )
	 0)
	((=number? m1 1) m2)
	((=number? m2 1) m1)
	((and (number? m1) (number? m2))
	 (* m1 m2))
	(else (list '* m1 m2)) ))
(define (make-subtract a1 a2)
  (list '+ a1 (list '* -1 a2)))
(define (make-division d1 d2)
  (cond ((=number? d1 0) 0)
	((=number? d2 1) d1)
	((and (number? d1) (number? d2))
	(/ d1 d2))
  (else (list '/ d1 d2)) ))
(define (divident d) (cadr d))
(define (divisor d) (caddr d))
(define (division? x)
  (and (pair? x) (eq? (car x) '/)) )

(define (addend s) (cadr s))
(define (augend s) (caddr s))
(define (multiplicant p) (cadr p))
(define (multiplier p) (caddr p))
(define (make-exponentiation b e)
  (cond ((=number? e 0) 1)
	((=number? e 1) b)
	((=number? b 1) 1)
	((and (number? b) (number? e))
	 (** b e) )
	(else (list '** b e)) ))
(define (base x) (cadr x))
(define (exponent x) (caddr x))
(define (exponentiation? x)
  (and (pair? x) (eq? (car x) '**)) )


(define (deriv exp var)
  (cond ((number? exp) 0) 
	((variable? exp)
	 (if (same-variable? exp var) 1 0) )
	((sum? exp)
	 (make-sum (deriv (addend exp) var)
		   (deriv (augend exp) var)) )
	((subtract? exp)
	 (make-sum (deriv (addend exp) var)
		   (make-product -1 (deriv (augend exp) var))))
	((product? exp)
	 (make-sum
	  (make-product (multiplier exp)
			(deriv (multiplicant exp)
			       var ))
	  (make-product (deriv (multiplier exp)
			       var )
			(multiplicant exp) )))
((division? exp)
 (make-sum
   (make-division
    (make-product
     (make-product -1
		   (divident exp) )
     (deriv (divisor exp) var) )
    (make-product
     (divisor exp)
     (divisor exp) ))
(make-product
 (make-division 1 (divisor exp))
 (deriv (divident exp) var))) )
((exponentiation? exp)
 (make-product
  (make-product
   (exponent exp)
   (deriv (base exp) var) )
  (make-exponentiation
   (base exp)
   (make-sum (exponent exp) -1) )))

(else
 (error "unknown expression type - DERIV" exp ))))

(deriv '(** x n) 'x)